import os
from datafed.CommandLib import API

# Ensure required environment variables are set
required_env_vars = [
    "DATAFED_PROJECT_ID",
    "DATAFED_COLLECTION_ID",
    "DATAFED_FILE_PATH",
    "DATAFED_USERNAME",
    "DATAFED_PASSWORD"
]

for var in required_env_vars:
    if not os.getenv(var):
        print(f"Error: Missing required environment variable: {var}")
        exit(1)

# Load environment variables
PROJECT_ID = os.getenv("DATAFED_PROJECT_ID")
COLLECTION_ID = os.getenv("DATAFED_COLLECTION_ID")  # Can be empty
FILE_PATH = os.getenv("DATAFED_FILE_PATH")
USERNAME = os.getenv("DATAFED_USERNAME")
PASSWORD = os.getenv("DATAFED_PASSWORD")
# Initialize API client
api = API()

# Step 1: Authenticate (Assumes DataFed is already configured with authentication)
try:
    api.loginByPassword(USERNAME, PASSWORD)
    print("Successfully logged into DataFed.")
except Exception as e:
    print(f"Login failed: {e}")
    exit(1)

# Step 2: Automatically get the user's default project
try:
    projects = api.projectList()  # Get the list of projects
    default_project = projects[0]["id"] if projects else None  # Select the first available project
    if not default_project:
        raise ValueError("No projects found. Please ensure you have access to a DataFed project.")
    api.projSet(default_project)
    print(f"Project set to: {default_project}")
except Exception as e:
    print(f"Error selecting project: {e}")
    exit(1)

# Step 3: Automatically select a default collection (if available)
collection_id = None
try:
    collections = api.getContext(default_project)  # Get collections in the project
    if collections:
        collection_id = collections[0]["id"]  # Select the first collection automatically
        api.collSet(collection_id)
        print(f"Collection set to: {collection_id}")
    else:
        print("No collections found. Proceeding without a collection.")
except Exception as e:
    print(f"Error selecting collection: {e}")

# Step 4: Define metadata for the record
metadata = {
    "title": "Automated Data Record",
    "description": "This data record was created automatically.",
    "keywords": ["automated", "data", "record"],
    "source": "Generated by script",
}

# Step 5: Create a new data record under the selected project/collection
try:
    response = api.dataCreate("automated_data_record", metadata, parent_id=collection_id if collection_id else default_project)
    record_id = response[0]["id"]  # Extract record ID
    print(f"Data record created successfully with ID: {record_id}")
except Exception as e:
    print(f"Error creating data record: {e}")
    exit(1)

# Step 6: Attach a predefined file to the data record
file_path = "/path/to/your/file.txt"  # Change this to the actual file path

try:
    api.dataPut(record_id, file_path)
    print(f"File '{file_path}' successfully attached to record {record_id}")
except Exception as e:
    print(f"Error attaching file: {e}")
