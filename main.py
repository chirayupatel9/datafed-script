import os
import json
from dotenv import load_dotenv
from datafed.CommandLib import API
from google.protobuf.json_format import MessageToJson

# Load environment variables
load_dotenv()

# Ensure all required environment variables are set
required_env_vars = [
    "DATAFED_PROJECT_ID",
    "DATAFED_COLLECTION_ID",
    "DATAFED_FILE_PATH",
    "DATAFED_USERNAME",
    "DATAFED_PASSWORD"
]

for var in required_env_vars:
    if not os.getenv(var):
        print(f"Error: Missing required environment variable: {var}")
        exit(1)

# Retrieve environment variables
PROJECT_ID = os.getenv("DATAFED_PROJECT_ID")
COLLECTION_ID = os.getenv("DATAFED_COLLECTION_ID")  # Can be empty
FILE_PATH = os.getenv("DATAFED_FILE_PATH")
USERNAME = os.getenv("DATAFED_USERNAME")
PASSWORD = os.getenv("DATAFED_PASSWORD")

# Initialize DataFed API client
api = API()

# Step 1: Authenticate
try:
    api.loginByPassword(USERNAME, PASSWORD)
    print("Successfully logged into DataFed.")
except Exception as e:
    print(f"Login failed: {e}")
    exit(1)

# Step 2: Set project and collection context
try:
    api.setContext(PROJECT_ID)
    print(f"Project context set to: {PROJECT_ID}")
except Exception as e:
    print(f"Error setting project context: {e}")
    exit(1)

if COLLECTION_ID:
    try:
        api.setContext(COLLECTION_ID)
        print(f"Collection context set to: {COLLECTION_ID}")
    except Exception as e:
        print(f"Error setting collection context: {e}")
        exit(1)

# Step 3: Define metadata for the record
metadata = {
    "title": "Automated Data Record",
    "description": "This data record was created automatically.",
    "keywords": ["automated", "data", "record"],
    "source": "Generated by script",
}

# Step 4: Create a new data record
try:
    parent_id = COLLECTION_ID if COLLECTION_ID else 'root'
    response = api.dataCreate(
        title="automated_data_record",
        metadata=json.dumps(metadata),
        parent_id=parent_id
    )
    record_id = response[0].data[0].id  # Extract record ID
    print(f"Data record created successfully with ID: {record_id}")
    if not os.path.exists(FILE_PATH):
        print(f"Error: File '{FILE_PATH}' does not exist.")
        exit(1)

    try:
        api.dataPut(record_id, FILE_PATH, wait=True)
        print(f"File '{FILE_PATH}' successfully attached to record {record_id}")
    except Exception as e:
        print(f"Error attaching file: {e}")
except Exception as e:
    print(f"Error creating data record: {e}")
    exit(1)

# Step 5: Attach a file to the data record
